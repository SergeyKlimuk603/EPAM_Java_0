package by.jonline.algoritmization.decomposition;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * @author Sergey Klimuk
 *
 *   	2. Algoritmization
 *   
 *   	Декомпозиция с использованием методов (подпрограммы)
 *
 *   	Задание 12
 *	
 *		Даны натуральные числа K и N. Написать метод (методы) формирования
 * массива А, элементами которого являются числа, сумма цифр которых равна
 * K и которые не больше N.
 *
 * Решение:
 * Будем перебирать числа от 0 до N и записывать в массив числа 
 * удовлетворяющие условию: что сумма цифр числа должна быть равна K.
 *	
 */

public class Task12 {

	public static void main(String[] args) {

        // Число N
        int n = 100;
        // число K
        int k = 23;

        // Массив чисел A (коллекция)
        List<Integer> a = new ArrayList<Integer>();

        // Находим масимальную сумму цифр kMax для чисел от 0 до N
        // Если заданная сумма цифр 'k' выходит запределы 0 < k < kMax, то формируем случайное число k
        // и выводим сообщение об этом
        int kMax = maxNumberSum(n);
        if (k > kMax || k < 0) {
            System.out.println("Число K = " + k
            					+ " не соответствует возможному значению");
            k = new Random().nextInt(kMax);
            System.out.println("Было сформировано случайное число:");
        }
        System.out.println("K = " + k + "\nN = " + n);

        // Перебираем числа от 0 до N
        for (int i = 0; i <= n; i++) {
            // Ищем цифры, подходящие условию задания
            if (numbersSum(i) == k) {
                a.add(i);
            }
        }

        // Выводим на коноль полученный массив чисел
        print(a);
    }

    private static void print(List<Integer> a) {
        System.out.println("Массив полученных чисел:");
        for (int x : a) {
            System.out.println(x);
        }
    }

    // Метод вычисляющия максимальное значение суммы цифр чисел от 0 до N (быстрый)
    private static int maxNumberSum(int n) {

        // если число меньше 10-ти, значит сумма цифр этого числа равна самому числу
        if (n < 10) return n;

        // переменная, определяющая наличие 9 во всех разрядах кроме старшего
        boolean r = true;

        // Максимально возможная сумма цифр чисел в диапазоне 0 - N
        int kMax = 0;
        while(n > 9) {
            // находим самый младший разряд остатка числа
            int k = n % 10;
            // проверяем наличие 9 во всех разрядах кроме старшего
            if (k != 9)
                r = false;

            // находим остаток от числа (отнимаем младший разряд)
            n /= 10;
            if (n < 10) { // проверяем что остался последния разряд в числе
                if (!r) { // определяем, какое число добавить к kMax последним (зависит от наличия 9 в разрядах числа N)
                    kMax += 9 + (n - 1);
                } else {
                    kMax += 9 + n;
                }
            // если перед младшим разрядом стоят как минимум две цифры, то принимаем, что максимально
            // возможное значение в этом разряде равно 9
            } else {
                kMax += 9;
            }
        }
        return kMax;
    }

    // Метод вычисляющия максимальное значение суммы цифр чисел от 0 до N (проверочный медленный)
    private static int maxNumberSum1(int n) {
        int kMax = 0;
        for (int i = 1; i <= n; i++) {
            int k = numbersSum(i);
            if (k > kMax)
                kMax = k;
        }
        return kMax;
    }

    private static int numbersSum(int number) {
        int sum = 0;
        while(number > 0) {
            sum += number % 10;
            number /= 10;
        }
        return sum;
    }
}

/*
   Результат работы программы:

Число K = 23 не соответствует возможному значению
Было сформировано случайное число:
K = 12
N = 100
Массив полученных чисел:
39
48
57
66
75
84
93

 */