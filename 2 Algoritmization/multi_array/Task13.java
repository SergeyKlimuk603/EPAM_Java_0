package by.jonline.algoritmization.multi_array;

import java.util.Random;

/**
 * @author Sergey Klimuk
 *
 *   	2. Algoritmization
 *   
 *   	Задачи. Массивы массивов
 *
 *   	Задание 13
 *	
 *		Отсортировать столбцы матрицы по возрастанию и убыванию значений
 * элементов
 *	
 */

public class Task13 {

	public static void main(String[] args) {

        // Задаем размерность матрицы
        int m = 10;
        int n = 10;

        // Создаем матрицу
        int [][] a = createArray(m, n);

        // Выводим созданный массив в консоль
        System.out.print("Созданная матрица: \n");
        printArray(a);

        // Сортируем столбцы матрицы по возрастанию методом пузытьковой сортировки
        for (int i = 0; i < n; i++) {
            boolean needSort = true;
            while(needSort) {
                // Принимаем, что столбец отсортирован
                needSort = false;
                for (int j = 1; j < m; j++) {
                    // Меняем элементы местами, если предыдущий элемент больше
                    if (a[j][i] < a[j - 1][i]) {
                        int temp = a[j][i];
                        a[j][i] = a[j - 1][i];
                        a[j - 1][i] = temp;
                        // столбец не отсортирован
                        needSort = true;
                    }
                }
            }
        }

        // Выводим отсортированный массив в консоль
        System.out.print("Столбцы отсортированы по возрастанию: \n");
        printArray(a);

        // Сортируем столбцы матрицы по убыванию методом сортировки выбором
        for (int i = 0; i < n; i++) {
            // Для каждой ячейки в столбце ищем максимальное значение снизу от данной ячейки
            for (int k = 0; k < m; k++) {
                int indexMax = k; // индекс элемента с максимальным (на данный момент) значением
                for (int j = k; j < m; j++) {
                    if (a[j][i] > a[indexMax][i])
                        indexMax = j;
                    // Меняем элементы местами, если найден больший элемент чем в текущей ячейке
                    if (indexMax != k) {
                        int temp = a[indexMax][i];
                        a[indexMax][i] = a[k][i];
                        a[k][i] = temp;
                    }
                }
            }
        }

        // Выводим отсортированный массив в консоль
        System.out.print("Столбцы отсортированы по убыванию: \n");
        printArray(a);
    }

    // Создание массива размерности m x n
    static int[][] createArray(int m, int n) {
        Random rand = new Random();
        int[][] a = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                a[i][j] = rand.nextInt(20) - 10;
            }
        }
        return a;
    }

    // Вывод массива на консоль
    static  void printArray(int[][] array) {
        for (int[] line : array) {
            for (int n : line) {
                if (n >= 0)
                    System.out.print("\t " + n);
                else
                    System.out.print("\t" + n);
            }
            System.out.println();
        }
    }
}

/*
   Результат работы программы:

Созданная матрица: 
	-4	-3	 7	 0	 4	 5	-9	 6	 7	-9
	 7	 9	-10	-1	 5	-4	-8	 3	 3	-10
	 7	 0	 8	 1	 4	 8	-3	-5	 1	-4
	-3	-2	-4	 5	-10	 7	-6	 6	-7	-10
	 3	-4	 1	 0	-6	 5	-3	 1	 9	-1
	 4	 4	 6	 4	 5	-2	-6	 1	-3	 4
	-1	-8	-3	 2	 5	 7	-2	-6	-3	-10
	 6	-8	 4	 5	-8	-4	-4	-4	 5	 1
	-10	-4	-1	-7	-7	-2	-3	-1	-5	 3
	 4	 4	 5	-5	-1	 0	-10	-5	-7	 9
Столбцы отсортированы по возрастанию: 
	-10	-8	-10	-7	-10	-4	-10	-6	-7	-10
	-4	-8	-4	-5	-8	-4	-9	-5	-7	-10
	-3	-4	-3	-1	-7	-2	-8	-5	-5	-10
	-1	-4	-1	 0	-6	-2	-6	-4	-3	-9
	 3	-3	 1	 0	-1	 0	-6	-1	-3	-4
	 4	-2	 4	 1	 4	 5	-4	 1	 1	-1
	 4	 0	 5	 2	 4	 5	-3	 1	 3	 1
	 6	 4	 6	 4	 5	 7	-3	 3	 5	 3
	 7	 4	 7	 5	 5	 7	-3	 6	 7	 4
	 7	 9	 8	 5	 5	 8	-2	 6	 9	 9
Столбцы отсортированы по убыванию: 
	 7	 9	 8	 5	 5	 8	-2	 6	 9	 9
	 7	 4	 7	 5	 5	 7	-3	 6	 7	 4
	 6	 4	 6	 4	 5	 7	-3	 3	 5	 3
	 4	 0	 5	 2	 4	 5	-3	 1	 3	 1
	 4	-2	 4	 1	 4	 5	-4	 1	 1	-1
	 3	-3	 1	 0	-1	 0	-6	-1	-3	-4
	-1	-4	-1	 0	-6	-2	-6	-4	-3	-9
	-3	-4	-3	-1	-7	-2	-8	-5	-5	-10
	-4	-8	-4	-5	-8	-4	-9	-5	-7	-10
	-10	-8	-10	-7	-10	-4	-10	-6	-7	-10
	 
 */