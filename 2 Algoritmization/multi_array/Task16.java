package by.jonline.algoritmization.multi_array;

import java.util.Random;

/**
 * @author Sergey Klimuk
 *
 *   	2. Algoritmization
 *   
 *   	Задачи. Массивы массивов
 *
 *   	Задание 16
 *	
 *		Построить магический квадрат порядка n, где n - нечетное число больше 1.
 * 
 * Ссылка на метод построения магического квадрата: https://ru.qaz.wiki/wiki/Siamese_method
 *	
 */

public class Task16 {

	public static void main(String[] args) {

        // Порядок квадрата
        int n = 7; // n - нечетное число больше 1
        int last = n * n; // Максимальное число в последовательности чисел квадрата

        // Проверка корректности введенного n
        if (n < 3 || n % 2 == 0) {
            System.out.println("Некорректно задан порядок квадрата, измените n и перезапустите программу");
            System.exit(1);
        }

        // Создаем квадрат
        int[][] square = new int[n][n];

        /*
        Описание заполнения квадрата:
        Записываем единицу в середину верхней строки
        ля дальнейшего заполнения квадрата сдвигаемся по диагонали на одну ячейку вверх и вправо.
        Если полученная ячейка покидает квадрат, она переносится в последнюю строку или первый
        столбец соответственно. Если полученная ячейка уже заполнена (не равна 0), то вместо
        этого сдвигаемся на одну ячейку вниз.
         */

        // следующее число в последовательности
        int next = 1;
        // Координаты текущей ячейки
        int j = 0;
        int i = n / 2;
        // Координаты для проверки занята ли ячейка
        int jj = 0;
        int ii = 0;
        square[j][i] = next;
        // Заполняем квадрат
        while (next < last) {
            // Сохраняем координаты ячейки, чтобы была возможность к ней вернуться
            jj = j;
            ii = i;
            // Сдвигаем ячейку вправо и вверх
            j--;
            i++;
            // Проверяем не вышла ли ячейка за пределы квадрата
            if (j < 0) j = n - 1;
            if (i >= n) i = 0;
            // Проверяем не занята ли ячейка, если занята, то ищем свободную
            while (true) {
                if (square[j][i] == 0) {
                    break;
                } else {
                    j = jj + 1;
                    i = ii;
                    if (j >= n)  j = 0;
                    jj = j;
                }
            }
            // Записываем следующее число в полученную ячейку
            next++;
            square[j][i] = next;
        }

        System.out.println("Полученный магический квадрат");
        printArray(square);
    }

    // Вывод массива на консоль
    static  void printArray(int[][] array) {
        for (int[] line : array) {
            for (int n : line) {
                if (n >= 1000)
                    System.out.print("  " + n);
                else if (n >= 100)
                    System.out.print("   " + n);
                else if (n >= 10)
                    System.out.print("    " + n);
                else
                    System.out.print("     " + n);
            }
            System.out.println();
        }
    }
}

/*
   Результат работы программы:

Полученный магический квадрат
    30    39    48     1    10    19    28
    38    47     7     9    18    27    29
    46     6     8    17    26    35    37
     5    14    16    25    34    36    45
    13    15    24    33    42    44     4
    21    23    32    41    43     3    12
    22    31    40    49     2    11    20
	 
 */